---
import Section from "./Section.astro";
import type { CollectionEntry } from "astro:content";

const { productos } = Astro.props as {
  productos: CollectionEntry<"productos">[];
};
const { carrito } = Astro.props as {
  carrito: string;
};
---
<main class="scroll-smooth">
  <Section>
    <header class="py-6">
      <h2
        class=" text-wrap font-bold leading-snug tracking-normal  w-full text-2xl lg:max-w-3xl lg:text-4xl">
        Productos Happy Live
      </h2>
  
    </header>
    
    <section class="products">
      {
        productos.map(producto => {
          const { data, slug } = producto;
          const { precio_publico, contenido, img, nombre, description, tipo } = data;
          return(
            <article 
              data-product-type={tipo}
              class="product-article relative flex flex-col h-[560px] lg:h-[650px] rounded-2xl bg-center bg-no-repeat bg-cover group overflow-hidden transition-[height] duration-300 ease-in-out"
              style={`background-image: url(${img})`}
            >      
              <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent group-hover:from-black/95 group-hover:via-black/75 transition-all duration-300 rounded-2xl"></div>
              
              <header class="relative z-20 flex justify-between mx-3 mb-0 pt-3 pb-2 px-1">
                <a href={carrito} target="_blank" class="text-sm font-bold text-white">
                ðŸ›’ ${precio_publico}.00 
                </a>
                <span class="text-sm font-medium text-white">
                  {contenido}
                </span>
              </header>
  
              <a href={`/producto/${slug}`} class="absolute z-20 bottom-3 right-4 text-white font-semibold text-sm hover:underline flex items-center">
                Leer mÃ¡s
                <svg xmlns="http://www.w3.org/2000/svg" class="ml-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                </svg>
              </a>
  
              <div class="relative z-10 flex flex-col h-full justify-end transform translate-y-21 group-hover:translate-y-0 transition-transform duration-300">
                <div class="p-4">
                  <h5 class="mb-2 text-white text-xl font-semibold">
                    {nombre}
                  </h5>
                  <p class="information-basica text-white/90 leading-normal font-light text-pretty">
                    {description}.
                  </p>
                </div>
                <footer class="mx-3 pb-3 pt-2 px-1">
                </footer>
              </div>
            </article>
          )
        })
      }
    </section>
  </Section>
</main>

  <style>
	.products {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(min(100%, 380px), 1fr));
		gap: 2rem;
	}

	@media (min-width: 560px) {
		.products {
			grid-template-columns: repeat(2, 1fr);
		}
	}

	@media (min-width: 840px) {
		.products {
			grid-template-columns: repeat(3, 1fr);
		}
	}

  .information-basica {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }
	
</style>

<script>
  const filterLinks = document.querySelectorAll('#product-filter-nav .filter-link');
  const productArticles = document.querySelectorAll('.products .product-article');
  const activeClasses = ['bg-neutral-200', 'font-medium', 'text-dark', 'dark:bg-neutral-700/30', 'dark:text-white'];
  const inactiveClasses = ['text-neutral-600', 'dark:text-neutral-400'];

  filterLinks.forEach(link => {
    link.addEventListener('click', (event) => {
      event.preventDefault(); // Prevent default link behavior
      const selectedType = link.getAttribute('data-filter-type');

      // Update link styles
      filterLinks.forEach(lnk => {
        lnk.classList.remove(...activeClasses);
        lnk.classList.add(...inactiveClasses);
      });
      link.classList.add(...activeClasses);
      link.classList.remove(...inactiveClasses);

      // Filter products
      productArticles.forEach(article => {
        const productType = article.getAttribute('data-product-type');
        if (selectedType === 'all' || productType === selectedType) {
          article.style.display = 'flex'; // Use 'flex' since the article uses flexbox
        } else {
          article.style.display = 'none';
        }
      });
    });
  });

  // Optional: Trigger the 'Todos' filter on initial load if needed
  // const initialFilter = document.querySelector('#product-filter-nav .filter-link[data-filter-type="all"]');
  // if (initialFilter) initialFilter.click();

</script>